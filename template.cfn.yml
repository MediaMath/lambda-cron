# TODO
# Lambda function
# Lambda function role
# Cloudwatch Event
# Cloudwatch event permission to invoke role
# - s3 bucket
# - SQS queue


Resources:
  TaskStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
          - Key: Project
            Value: LambdaCron

  TaskQueue:
    Type: AWS::SQS::Queue

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: lambda-cron-rmalecky
        S3Key: code3.zip
      Handler: main.handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub
              - arn:aws:s3:::${bucket}
              - { bucket: !Ref TaskStorageBucket }
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub
              - arn:aws:s3:::${bucket}/*
              - { bucket: !Ref TaskStorageBucket }
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueUrl
            Resource: !GetAtt TaskQueue.Arn

Outputs:
  TaskStorageBucket:
    Value: !Ref TaskStorageBucket
    Description: Bucket to store tasks

  TaskQueue:
    Value: !GetAtt TaskQueue.Arn
    Description: Task Queue Arn

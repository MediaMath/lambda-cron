# TODO
# Lambda function
# Lambda function role
# Cloudwatch Event
# Cloudwatch event permission to invoke role
# - s3 bucket
# - SQS queue

Parameters:
  CodeS3Key:
    Type: String
    Description: Location of the most recent version of the lambda code
  Environment:
    Type: String
    AllowedValues:
      - sandbox
      - staging
      - prod
    Description: Environment to run the function.

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
          - LambdaCron-${environment}
          - { environment: !Ref Environment }
      Code:
        S3Bucket: !Sub
          - lambda-cron.${environment}.mmknox
          - { environment: !Ref Environment }
        S3Key: !Sub
          - code/${filename}
          - { filename: !Ref CodeS3Key }
      Handler: main.handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
          - LambdaCron-${environment}
          - { environment: !Ref Environment }
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub
              - arn:aws:s3:::lambda-cron.${environment}.mmknox
              - { environment: !Ref Environment }
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub
              - arn:aws:s3:::lambda-cron.${environment}.mmknox/tasks/*
              - { environment: !Ref Environment }
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueUrl
            Resource: !Sub
              - arn:aws:sqs:us-east-1:438025690015:preakness-${environment}
              - { environment: !Ref Environment }

  LambdaCronHourlyEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub
        - LambdaCron-hourly-${environment}
        - { environment: !Ref Environment }
      ScheduleExpression: 'cron(0 * * * ? *)'
      State: DISABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: !Sub
            - LambdaCron-hourly-${environment}
            - { environment: !Ref Environment }

  LambdaCronEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaCronHourlyEvent.Arn

Outputs:
  LambdaFunction:
    Value: !Ref LambdaFunction
    Description: LambdaFunction
  LambdaRole:
    Value: !Ref LambdaRole
    Description: LambdaRole


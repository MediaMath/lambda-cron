Parameters:
  CodeS3Key:
    Type: String
    Description: Location of the most recent version of the lambda code
  Environment:
    Type: String
    AllowedValues:
      - sandbox
      - staging
      - prod
    Description: Environment to run the function.
  State:
    Type: String
    AllowedValues:
      - ENABLED
      - DISABLED
    Description: State for CloudWatch event

Conditions:
  IsProdEnvironment: !Equals [!Ref Environment, prod]

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub LambdaCron-${Environment}
      Code:
        S3Bucket: !Sub lambda-cron.${Environment}.mmknox
        S3Key: !Ref CodeS3Key
      Handler: main.handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaCron-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub arn:aws:s3:::lambda-cron.${Environment}.mmknox
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::lambda-cron.${Environment}.mmknox/tasks/*
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueUrl
            Resource: !Sub arn:aws:sqs:us-east-1:438025690015:preakness-${Environment}

  LambdaCronHourlyEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub LambdaCron-hourly-${Environment}
      ScheduleExpression: 'cron(0 * * * ? *)'
      State: !Ref State
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: !Sub LambdaCron-hourly-${Environment}

  LambdaCronEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaCronHourlyEvent.Arn

  LambdaCronSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: "jbravo@mediamath.com"
          Protocol: "email"
      TopicName: !Sub LambdaCron-${Environment}

  LambdaCronAalarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      Namespace: AWS/Lambda
      MetricName: Errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Statistic: Sum
      Unit: Count
      Period: '3600'
      EvaluationPeriods: '1'
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: LambdaFunction
        - Name: Resource
          Value:
            Ref: LambdaFunction
      AlarmActions:
        - Ref: LambdaCronSNSTopic
      AlarmDescription: !Sub Errors in LambdaCron ${Environment}
      ActionsEnabled: !If [IsProdEnvironment, True, False]

Outputs:
  LambdaFunction:
    Value: !Ref LambdaFunction
    Description: LambdaFunction
  LambdaRole:
    Value: !Ref LambdaRole
    Description: LambdaRole

